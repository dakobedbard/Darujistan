version: '3.8'
networks:
  keycloak-network:
    driver: bridge
  dynamo_network:
    driver: bridge
  credentials_network:
    driver: bridge
    ipam:
      config:
        - subnet: "169.254.170.0/24"
          gateway: 169.254.170.1

services:
  postgres:
    image: postgres:latest
    container_name: keycloak-db
#    restart: unless-stopped
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - keycloak-network

  keycloak:
    container_name: keycloak
    build:
      context: keycloak
    #image: quay.io/keycloak/keycloak:19.0.1
    restart: unless-stopped
    environment:
      KC_HOSTNAME_STRICT: "false"
      KC_DB_URL: "jdbc:postgresql://postgres:5432"
      KC_DB: postgres
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_PORT: 3005

    ports:
      - 3005:3005
      - 8443:8443
    networks:
      - keycloak-network
    depends_on:
      - postgres

  ui:
    build:
      context: darujistan-ui
    command: npm run start
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - "./darujistan-ui/src:/bardui/src"
      - "./darujistan-ui/package.json:/bardui/package.json"
    networks:
      - keycloak-network
    environment:
      PORT: "8080"
      CI: "true"

  ecs-local-endpoints:
    container_name: ecs-local-container-endpoints
    # The Amazon ECS Local Container Endpoints Docker Image
    image: amazon/amazon-ecs-local-container-endpoints
    volumes:
      # Mount /var/run so we can access docker.sock and talk to Docker
      - /var/run:/var/run
      # Mount the shared configuration directory, used by the AWS CLI and AWS SDKs
      # On Windows, this directory can be found at "%UserProfile%\.aws"
      - $HOME/.aws/:/home/.aws/
    environment:
      # define the home folder; credentials will be read from $HOME/.aws
      HOME: "/home"
      # You can change which AWS CLI Profile is used
      AWS_PROFILE: "default"
    networks:
      credentials_network:
        # This special IP address is recognized by the AWS SDKs and AWS CLI
        ipv4_address: "169.254.170.2"
    healthcheck:
      test: ["CMD", "curl", "http://169.254.170.2/creds"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s
  api:
    container_name: darujistan_api
    build: darujistan-api
    restart: always
    image: darujistan_api:latest
    networks:
      keycloak-network:
      dynamo_network:
      credentials_network:
        ipv4_address: "169.254.170.3"
    ports:
      - "5000:5000"
    environment:
      AWS_DEFAULT_REGION: "us-west-2"
      AWS_CONTAINER_CREDENTIALS_RELATIVE_URI: "/creds"
      EPHEMERAL_DOCKER: "local"
    volumes:
      - "./darujistan-api/darujistan_api:/usr/src/app/darujistan_api"
    stdin_open: true   # Add this line into your service
    tty: true   # Add this line into your service



volumes:
  postgres-data: {}

